{
	"info": {
		"_postman_id": "d8e239a8-f3cb-40f3-b143-c2657768f64f",
		"name": "Test9decmain",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28264405"
	},
	"item": [
		{
			"name": "dentist-service",
			"item": [
				{
					"name": "POST /api/dentists/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dentist@example.com\",\n  \"password\": \"secretpassword\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Street\",\n  \"clinicHouseNumber\": 123,\n  \"clinicZipCode\": 12345,\n  \"picture\": \"base64encodedimage\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE fail /api/dentists/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/dentists/dentist@example.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"dentist@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/dentists/register (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Email is already registered\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dentist@example.com\", // this email was already registered\n  \"password\": \"secretpassword\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Street\",\n  \"clinicHouseNumber\": 123,\n  \"clinicZipCode\": 12345,\n  \"picture\": \"base64encodedimage\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/session/whois fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/sessions/whois",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sessions",
								"whois"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/dentists/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dentist@example.com\",\n  \"password\": \"secretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/session/whois",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Retrieve correct whois data\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.email).to.eql(\"dentist@example.com\");",
									"        pm.expect(jsonData.type).to.eql(\"d\");",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/sessions/whois",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sessions",
								"whois"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/dentists/login (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"fake_dentist@example.com\", // email is not registered yet\n  \"password\": \"secretpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST api/dentists/login (invalid) 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dentist.not.registered@example.com\", // this email was not registered\n  \"password\": \"password\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Street\",\n  \"clinicHouseNumber\": 123,\n  \"clinicZipCode\": 12345,\n  \"picture\": \"base64encodedimage\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /api/dentists/:email Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/dentist@example.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"dentist@example.com"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /api/dentists/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/dentist@example.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"dentist@example.com"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /api/dentists/:email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"firstName\": \"Kate\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/dentist@example.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"dentist@example.com"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH api/dentists/:email (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// this request is invalid, since it the update fields don't march the schema",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid input\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"invalidField\": \"Invalid value\" } // update fields don't march the schema",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/dentist@example.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"dentist@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /api/dentists/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/dentists/dentist@example.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"dentist@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/dentists/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dentist@example.com\",\n  \"password\": \"secretpassword\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Street\",\n  \"clinicHouseNumber\": 123,\n  \"clinicZipCode\": 12345,\n  \"picture\": \"base64encodedimage\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/dentists/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/dentists/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"dentists",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST fail /api/session/whois FAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/sessions/whois",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sessions",
								"whois"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "appointment-service",
			"item": [
				{
					"name": "create-sample-dentists",
					"item": [
						{
							"name": "POST /api/dentists/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Sesame Street\",\n  \"clinicHouseNumber\": 11,\n  \"clinicZipCode\": 197312,\n  \"picture\": \"base64encodedimage\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/register 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{dentistEmailSample2}}\",\n  \"password\": \"pass123pass456\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Street\",\n  \"clinicHouseNumber\": 12,\n  \"clinicZipCode\": 197312,\n  \"picture\": \"base64encodedimage\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "A sample dentist created for the `appointment-service`."
				},
				{
					"name": "POST /",
					"item": [
						{
							"name": "check-auth",
							"item": [
								{
									"name": "POST (empty dentistId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_timestamp\": 123131312,\n    \"end_timestamp\": 123131987\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (invalid session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "sessionKey=InvalidSessionKey",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_timestamp\": 123131312,\n    \"end_timestamp\": 123131987,\n    \"dentistId\": \"{{dentistEmailSample}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (unmatched emails)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: attempt to create an appointment for another or non-existent dentist account.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_timestamp\": 123131312,\n    \"end_timestamp\": 123131987,\n    \"dentistId\": \"{{dentistEmailSample}})8dajsda121.yahoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "check-format",
							"item": [
								{
									"name": "POST (malformed fields)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid appointment object.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Start_timest&m\": 123131312, // malformed\n    \"e(d_timest_p\": 123131987,   // malformed\n    \"dentistId\": \"{{dentistEmailSample}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/api/v1/appointments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (missing field)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid appointment object.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_timestamp\": 123131312,\n    // \"end_timestamp\" is missing!\n    \"dentistId\": \"{{dentistEmailSample}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (missing body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    // empty - error\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (invalid field types)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid appointment object.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_timestam\": 123131312,\n    \"end_timestamp\": {}, // invalid type\n    \"dentistId\": \"{{dentistEmailSample}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (disallowed set patientId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid appointment object.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dentistId\": \"{{dentistEmailSample}}\",\n    \"patienId\": \"1233132312321sdada\" // set automatically - ignored.\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create-success",
							"item": [
								{
									"name": "new",
									"item": [
										{
											"name": "POST /api/appointments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code shall be 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"// Parse the request and response JSON bodies",
															"",
															"var requestJson = JSON.parse(pm.request.body.raw);",
															"var responseJson = pm.response.json();",
															"",
															"// Get the number of keys in the request and response",
															"var requestKeys = Object.keys(requestJson).length;",
															"var responseKeys = Object.keys(responseJson).length;",
															"",
															"// Compare the number of keys",
															"// Must be lower by 2, because there's the auto-generated key in the",
															"// response and patientId is set to NULL automatically.",
															"pm.test(\"Number of keys in request is lower by 1 than the response\", function () {",
															"    pm.expect(requestKeys).to.equal(responseKeys - 2);",
															"});",
															"",
															"// Check if the patientId property is set to null",
															"pm.test(\"Verify patientId is set to null\", function() {",
															"    pm.expect(responseJson.patientId).to.equal(null);",
															"});",
															"",
															"",
															"// Set the ID for other tests.",
															"const appointmentId = pm.response.json().id;",
															"pm.environment.set(\"appointmentId\", appointmentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start_timestamp\": 123131312,\n    \"end_timestamp\": 123131987,\n    \"dentistId\": \"{{dentistEmailSample}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/appointments",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"appointments"
													]
												}
											},
											"response": []
										}
									],
									"description": "Folder added to preserve the order."
								},
								{
									"name": "create-with-other-dentist",
									"item": [
										{
											"name": "POST /api/dentists/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{dentistEmailSample2}}\",\n  \"password\": \"pass123pass456\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/dentists/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"dentists",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST /api/appointments 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code shall be 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Response is in JSON format\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"// Parse the request and response JSON bodies",
															"",
															"var requestJson = JSON.parse(pm.request.body.raw);",
															"var responseJson = pm.response.json();",
															"",
															"// Get the number of keys in the request and response",
															"var requestKeys = Object.keys(requestJson).length;",
															"var responseKeys = Object.keys(responseJson).length;",
															"",
															"// Compare the number of keys",
															"// Must be lower by 2, because there's the auto-generated key in the",
															"// response and patientId is set to NULL automatically.",
															"pm.test(\"Number of keys in request is lower by 1 than the response\", function () {",
															"    pm.expect(requestKeys).to.equal(responseKeys - 2);",
															"});",
															"",
															"// Check if the patientId property is set to null",
															"pm.test(\"Verify patientId is set to null\", function() {",
															"    pm.expect(responseJson.patientId).to.equal(null);",
															"});",
															"",
															"",
															"// Set the ID for other tests.",
															"const appointmentId = pm.response.json().id;",
															"pm.environment.set(\"appointmentId2\", appointmentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start_timestamp\": 31231241412,\n    \"end_timestamp\": 312321241412,\n    \"dentistId\": \"{{dentistEmailSample2}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/appointments",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"appointments"
													]
												}
											},
											"response": []
										}
									],
									"description": "A sample dentist created for the `appointment-service`."
								}
							],
							"description": "Used in the **subsequent tests**."
						},
						{
							"name": "simulate-for-patient",
							"item": [
								{
									"name": "create-sample-patient",
									"item": [
										{
											"name": "POST/api/patients/register",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code shall be 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "sessionKey=\"\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\",\n    \"birthDate\": \"2003\",\n    \"lastName\": \"Sample\",\n    \"firstName\": \"Patient\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/patients/register",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"patients",
														"register"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST/api/patients/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/patients/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"patients",
														"login"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POST (disallowed user type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: only dentists can create appointments.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_timestamp\": 123131312,\n    \"end_timestamp\": 123131987,\n    \"dentistId\": \"{{dentistEmailSample}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/appointments",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Generate sample appointments used for the `appointment-service`."
				},
				{
					"name": "GET / (unbooked)",
					"item": [
						{
							"name": "switch-to-dentist",
							"item": [
								{
									"name": "POST /api/dentists/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/dentists/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"dentists",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"description": "A sample dentist created for the `appointment-service`."
						},
						{
							"name": "GET / (as dentist)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Check if the response is an array",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Check if each item in the array is an object",
											"// and ensure that each patientId is NULL",
											"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(function (item) {",
											"            pm.expect(item).to.be.an('object');",
											"            pm.expect(item.patientId).to.be.null; // must be NULL",
											"        });",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/?userId={{dentistEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "{{dentistEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET / (as dentist; interval)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Check if the response is an array",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Check if each item in the array is an object",
											"// and ensure that each patientId is NULL",
											"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(function (item) {",
											"            pm.expect(item).to.be.an('object');",
											"            pm.expect(item.patientId).to.be.null; // must be NULL",
											"        });",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/?userId={{dentistEmailSample}}&from=1231312&to=131231232",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "from",
											"value": "1231312"
										},
										{
											"key": "to",
											"value": "131231232"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET / (as *empty* dentist)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/?userId={{empty}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "{{empty}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET / (invalid cookie)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "sessionKey=f8f2f1fc-80c9-4329-ad89-3551231312312",
										"description": "An invalid cookie that overwrites the one passed.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/v1/appointments/?userId={{dentistEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "{{dentistEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET / (as *invalid* dentist)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/?userId={{dentistEmailSample}}@!%23%26das",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "{{dentistEmailSample}}@!%23%26das"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET invalid route",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response message is 'Not found.'\", function () {",
											"    pm.expect(pm.response.text()).to.include('Not found.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/foo/bar",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"foo",
										"bar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /patients/:email",
					"item": [
						{
							"name": "get-as-dentist[fail]",
							"item": [
								{
									"name": "GET /patients/:email (invalid type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: disallowed operation.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/patients/:email",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"patients",
												":email"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "switch-to-patient",
							"item": [
								{
									"name": "POST/api/patients/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/patients/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"patients",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET (invalid cookie)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "sessionKey=f8f2f1fc-80c9-4329-ad89-3551231312312",
										"description": "An invalid cookie that overwrites the one passed.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/v1/appointments/patients/:email",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"patients",
										":email"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{patientEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (as *empty* patient)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/patients/:email",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"patients",
										":email"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{empty}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (as *invalid* patient)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: attempt to access appointments of other or non-existent patient.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/patients/:email",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"patients",
										":email"
									],
									"variable": [
										{
											"key": "email",
											"value": "foobar@baz.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (as *other* patient)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: attempt to access appointments of other or non-existent patient.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/patients/:email",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"patients",
										":email"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /dentists/:email",
					"item": [
						{
							"name": "as-patient",
							"item": [
								{
									"name": "switch-to-patient",
									"item": [
										{
											"name": "POST/api/patients/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/patients/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"patients",
														"login"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET (empty dentistId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing dentist id.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{empty}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (empty email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{empty}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{empty}}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (invalid session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": false
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "sessionKey=invalid-session",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (invalid `from`)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: to and from must be numbers.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}&from={}@%!&to=132131",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "from",
													"value": "{}@%!",
													"description": "Not okay!"
												},
												{
													"key": "to",
													"value": "132131"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (invalid `to`)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: to and from must be numbers.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}&from=132112&to=)(*%26dsa",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "from",
													"value": "132112",
													"description": "Not okay!"
												},
												{
													"key": "to",
													"value": ")(*&dsa"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (invalid interval)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: from must be smaller than to.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}&from=12312311&to=123",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "from",
													"value": "12312311"
												},
												{
													"key": "to",
													"value": "123",
													"description": "To mustn't be smaller than from."
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked) [onlyAvailble=true]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}&onlyAvailable=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "onlyAvailable",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked) [onlyAvailble=true] Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}&onlyAvailable=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "onlyAvailable",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked; interval)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}&from=123121&to=123821",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}"
												},
												{
													"key": "from",
													"value": "123121"
												},
												{
													"key": "to",
													"value": "123821"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked; interval) [onlyAvailable=false]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{patientEmailSample}}&from=123131309&to=123131990&onlyAvailable=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "from",
													"value": "123131309"
												},
												{
													"key": "to",
													"value": "123131990"
												},
												{
													"key": "onlyAvailable",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "as-dentist",
							"item": [
								{
									"name": "switch-to-dentist",
									"item": [
										{
											"name": "POST /api/dentists/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/dentists/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"dentists",
														"login"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET (invalid query param)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid query parameter.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{dentistEmailSample}}&onlyAvailable=falsee_",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "onlyAvailable",
													"value": "falsee_"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (all)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Items in the array are objects\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{dentistEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dentistEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (all) [onlyAvailable=false]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Items in the array are objects\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{dentistEmailSample}}&onlyAvailable=false",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "onlyAvailable",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (unbooked) [onlyAvailable=true]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Check if the response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check if each item in the array is an object",
													"// and ensure that each patientId is NULL",
													"pm.test(\"Items in the array are objects and patienId is NULL\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(function (item) {",
													"            pm.expect(item).to.be.an('object');",
													"            pm.expect(item.patientId).to.be.null; // must be NULL",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{dentistEmailSample}}&onlyAvailable=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "onlyAvailable",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET (pretend to be other dentist)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: disallowed operation.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/dentists/:email?userId={{dentistEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"dentists",
												":email"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dentistEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}131ds"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GET /:id",
					"item": [
						{
							"name": "switch-to-patient",
							"item": [
								{
									"name": "POST/api/patients/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/patients/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"patients",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET (invalid cookie)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "sessionKey=f8f2f1fc-80c9-4329-ad89-3551231312312",
										"description": "An invalid cookie that overwrites the one passed.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?userId={{patientEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{patientEmailSample}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (as *empty* patient)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?userId={{empty}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{empty}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (as *invalid* patient)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?userId={{patientEmailSample}}(@!*kD",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{patientEmailSample}}(@!*kD",
											"description": "Not a valid patientID."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?userId={{patientEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{patientEmailSample}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}_128319ess"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (OK)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response contains the 'id' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"});",
											"",
											"pm.test(\"Response contains the 'start_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('start_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'end_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('end_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'dentistId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('dentistId');",
											"});",
											"",
											"pm.test(\"Response contains the 'patientId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('patientId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?userId={{patientEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{patientEmailSample}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SUB [patient]",
					"item": [
						{
							"name": "check-type",
							"item": [
								{
									"name": "switch-to-dentist",
									"item": [
										{
											"name": "POST /api/dentists/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/dentists/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"dentists",
														"login"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "SUB (invalid type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: only patients can subscribe to dentists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"subscribe",
												":email",
												":patientEmail"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "patientEmail",
													"value": "{{patientEmailSample}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "switch-to-patient",
							"item": [
								{
									"name": "POST/api/patients/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/patients/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"patients",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "check-auth",
							"item": [
								{
									"name": "SUB (empty session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"subscribe",
												":email",
												":patientEmail"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "patientEmail",
													"value": "{{patientEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SUB (invalid session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "sessionKey=123",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"subscribe",
												":email",
												":patientEmail"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "patientEmail",
													"value": "{{patientEmailSample}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SUB (empty dentist email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid dentist email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{empty}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SUB (empty patient email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid patient email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{empty}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SUB (invalid patient email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: invalid email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}12312",
											"description": "Malformed."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SUB (OK)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Prase JSON response",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response contains 'dentistId' attribute\", function () {",
											"    pm.expect(jsonData).to.have.property('dentistId');",
											"});",
											"",
											"pm.test(\"Response contains 'patientId' attribute\", function () {",
											"    pm.expect(jsonData).to.have.property('patientId');",
											"});",
											"",
											"pm.test(\"'dentistId' is not NULL\", function (){",
											"    pm.expect(jsonData.dentistId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"'patientId' is not NULL\", function (){",
											"    pm.expect(jsonData.patientId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}",
											"description": "Malformed."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SUB (CONFLICT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Conflict: subscription already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}",
											"description": "Malformed."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UNSUB [patient]",
					"item": [
						{
							"name": "check-type",
							"item": [
								{
									"name": "switch-to-dentist",
									"item": [
										{
											"name": "POST /api/dentists/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/dentists/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"dentists",
														"login"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "UNSUB (invalid type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: only patients can unsubscribe from dentists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"subscribe",
												":email",
												":patientEmail"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "patientEmail",
													"value": "{{patientEmailSample}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "switch-to-patient",
							"item": [
								{
									"name": "POST/api/patients/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/patients/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"patients",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "check-auth",
							"item": [
								{
									"name": "UNSUB (empty session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"subscribe",
												":email",
												":patientEmail"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "patientEmail",
													"value": "{{patientEmailSample}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "UNSUB (invalid session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": false
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"value": "sessionKey=123",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"subscribe",
												":email",
												":patientEmail"
											],
											"variable": [
												{
													"key": "email",
													"value": "{{dentistEmailSample}}"
												},
												{
													"key": "patientEmail",
													"value": "{{patientEmailSample}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UNSUB (empty dentist email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid dentist email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{empty}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNSUB (empty patient email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid patient email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{empty}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNSUB (invalid patient email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: invalid email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}12312",
											"description": "Malformed."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNSUB (OK)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/subscribe/:email/:patientEmail",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"subscribe",
										":email",
										":patientEmail"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{dentistEmailSample}}"
										},
										{
											"key": "patientEmail",
											"value": "{{patientEmailSample}}",
											"description": "Malformed."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /count [admin]",
					"item": [
						{
							"name": "check-type",
							"item": [
								{
									"name": "patient",
									"item": [
										{
											"name": "switch-to-patient",
											"item": [
												{
													"name": "POST/api/patients/login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/v1/patients/login",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"v1",
																"patients",
																"login"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET COUNT (invalid type)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code shall be 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Response is an object\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object');",
															"});",
															"",
															"pm.test(\"Response contains 'message' attribute\", function () {",
															"    pm.expect(pm.response.json()).to.have.property('message');",
															"});",
															"",
															"pm.test(\"Contains correct response message\", function () {",
															"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: missing administrator privileges.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/appointments/admins/count",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"appointments",
														"admins",
														"count"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "dentist",
									"item": [
										{
											"name": "switch-to-dentist",
											"item": [
												{
													"name": "POST /api/dentists/login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/v1/dentists/login",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"v1",
																"dentists",
																"login"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GET COUNT (invalid type)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code shall be 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Response is an object\", function () {",
															"    pm.expect(pm.response.json()).to.be.an('object');",
															"});",
															"",
															"pm.test(\"Response contains 'message' attribute\", function () {",
															"    pm.expect(pm.response.json()).to.have.property('message');",
															"});",
															"",
															"pm.test(\"Contains correct response message\", function () {",
															"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: missing administrator privileges.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/appointments/admins/count",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"appointments",
														"admins",
														"count"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "check-auth",
							"item": [
								{
									"name": "switch-to-admin",
									"item": [
										{
											"name": "POST api/admins/login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"email\": \"admin@gmail.com\", \"password\": \"password\"}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/admins/login",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"admins",
														"login"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GET COUNT (empty session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/admins/count",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"admins",
												"count"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET COUNT (invalid session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "sessionKey={{empty}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/api/v1/appointments/admins/count",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												"admins",
												"count"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET COUNT (invalid query param)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid query parameter.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/admins/count?onlyAvailable=false_",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"admins",
										"count"
									],
									"query": [
										{
											"key": "onlyAvailable",
											"value": "false_"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET COUNT (unbooked)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with attribute 'count'\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('count');",
											"});",
											"",
											"pm.test(\"Value of count is a number\", function () {",
											"    var count = pm.response.json().count;",
											"    pm.expect(count).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/admins/count?onlyAvailable=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"admins",
										"count"
									],
									"query": [
										{
											"key": "onlyAvailable",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET COUNT (all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with attribute 'count'\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('count');",
											"});",
											"",
											"pm.test(\"Value of count is a number\", function () {",
											"    var count = pm.response.json().count;",
											"    pm.expect(count).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/admins/count",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"admins",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET COUNT (all) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Http status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with attribute 'count'\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('count');",
											"});",
											"",
											"pm.test(\"Value of count is a number\", function () {",
											"    var count = pm.response.json().count;",
											"    pm.expect(count).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/admins/count?onlyAvailable=false",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"admins",
										"count"
									],
									"query": [
										{
											"key": "onlyAvailable",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BOOK /:id",
					"item": [
						{
							"name": "book-as-dentist[fail]",
							"item": [
								{
									"name": "POST /api/dentists/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/dentists/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"dentists",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "BOOK (as dentist, *invalid*)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: only patients can book appointments.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												":id"
											],
											"query": [
												{
													"key": "patientId",
													"value": "{{patientEmailSample}}"
												},
												{
													"key": "toBook",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{appointmentId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "switch-to-patient",
							"item": [
								{
									"name": "POST/api/patients/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{patientEmailSample}}\",\n    \"password\": \"complicatedpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/patients/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"patients",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BOOK (missing email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{empty}}&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{empty}}"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (invalid session)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "sessionKey=132132",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (invalid email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: invalid email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}d23121&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}d23121",
											"description": "Invalid."
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Get the response JSON",
											"var jsonResponse = pm.response.json();",
											"",
											"// Check if the response is an object",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"});",
											"",
											"// Check if the response has the required properties",
											"pm.test(\"Check start_timestamp property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('start_timestamp');",
											"    pm.expect(jsonResponse.start_timestamp).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check end_timestamp property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('end_timestamp');",
											"    pm.expect(jsonResponse.end_timestamp).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check dentistId property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('dentistId');",
											"    pm.expect(jsonResponse.dentistId).to.be.a('string');",
											"});",
											"",
											"pm.test(\"patientId is NOT null\", function() {",
											"    pm.expect(jsonResponse).to.have.property('patientId');",
											"    pm.expect(jsonResponse.patientId).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of objects\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
											"    jsonData.forEach(function(appointment) {",
											"        pm.expect(appointment).to.be.an('object').that.has.all.keys('id', 'start_timestamp', 'end_timestamp', 'dentistId', 'patientId');",
											"        pm.expect(appointment.patientId).to.not.be.null;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/patients/:email",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"patients",
										":email"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{patientEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (invalid appointment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Get the response JSON",
											"var jsonResponse = pm.response.json();",
											"",
											"// Check if the response is an object",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}1231312"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (repeated; fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Get the response JSON",
											"var jsonResponse = pm.response.json();",
											"",
											"// Check if the response is an object",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Correct error message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: appointment is already booked.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (unbook)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response code shall be 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonResponse = pm.response.json();",
											"",
											"pm.test('Response is an object', function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"})",
											"",
											"pm.test('Check start_timestamp property', function () {",
											"    pm.expect(jsonResponse).to.have.property('start_timestamp');",
											"    pm.expect(jsonResponse.start_timestamp).to.be.a('number');",
											"})",
											"",
											"pm.test('Check end_timestamp property', function () {",
											"    pm.expect(jsonResponse).to.have.property('end_timestamp');",
											"    pm.expect(jsonResponse.end_timestamp).to.be.a('number');",
											"})",
											"",
											"pm.test('dentistId is a String', function () {",
											"    pm.expect(jsonResponse).to.have.property('dentistId');",
											"    pm.expect(jsonResponse.dentistId).to.be.a('string');",
											"})",
											"",
											"pm.test(\"patienId is set to Null\", function() {",
											"    pm.expect(jsonResponse).to.have.property('patientId');",
											"    pm.expect(jsonResponse.patientId).to.be.null;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=false",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}"
										},
										{
											"key": "toBook",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET (success; empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Response has 0 items\", function () {",
											"    pm.expect(pm.response.json()).to.have.lengthOf(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/patients/:email",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										"patients",
										":email"
									],
									"variable": [
										{
											"key": "email",
											"value": "{{patientEmailSample}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (invalid query param.)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response code shall be 400', function () {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"// Get the response JSON",
											"var jsonResponse = pm.response.json();",
											"",
											"// Check if the response is an object",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Correct error message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Bad request: invalid query parameter.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId={{patientEmailSample}}&toBook=falseee",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "{{patientEmailSample}}"
										},
										{
											"key": "toBook",
											"value": "falseee"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests for the **Booking** functionality of the system."
				},
				{
					"name": "DELETE /:id",
					"item": [
						{
							"name": "remove-as-patient[fail]",
							"item": [
								{
									"name": "DELETE (disallowed)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: only dentists can delete appointments.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/:id?dentistId={{patientEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												":id"
											],
											"query": [
												{
													"key": "dentistId",
													"value": "{{patientEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{appointmentId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "switch-to-dentist",
							"item": [
								{
									"name": "POST /api/dentists/login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{dentistEmailSample}}\",\n  \"password\": \"pass123pass456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/dentists/login",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"dentists",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"description": "**Only dentists are allowed** to `DELETE` appointments."
						},
						{
							"name": "check-auth",
							"item": [
								{
									"name": "DELETE (empty email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Bad request: missing session key or email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/:id?dentistId={{empty}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												":id"
											],
											"query": [
												{
													"key": "dentistId",
													"value": "{{empty}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{appointmentId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE (invalid session)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized: invalid session.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"value": "sessionKey=\"1312\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/api/v1/appointments/:id?dentistId={{dentistEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												":id"
											],
											"query": [
												{
													"key": "dentistId",
													"value": "{{dentistEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{appointmentId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE (unowned appointment)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code shall be 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response is an object\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Response contains 'message' attribute\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('message');",
													"});",
													"",
													"pm.test(\"Contains correct response message\", function () {",
													"    pm.expect(pm.response.json().message).to.equal(\"Forbidden: disallowed operation.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/appointments/:id?dentistId={{dentistEmailSample}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"appointments",
												":id"
											],
											"query": [
												{
													"key": "dentistId",
													"value": "{{dentistEmailSample}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{appointmentId2}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE (invalid appointment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?dentistId={{dentistEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "dentistId",
											"value": "{{dentistEmailSample}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}dsa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE (success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response contains the 'id' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"});",
											"",
											"pm.test(\"Response contains the 'start_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('start_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'end_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('end_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'dentistId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('dentistId');",
											"});",
											"",
											"pm.test(\"Response contains the 'patientId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('patientId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?dentistId={{dentistEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "dentistId",
											"value": "{{dentistEmailSample}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE (repeated; fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response contains 'message' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Contains correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"Not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?dentistId={{dentistEmailSample}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "dentistId",
											"value": "{{dentistEmailSample}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "patient-service",
			"item": [
				{
					"name": "POST/api/patients/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "sessionKey=\"\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sophia2043.appleseed@email.com\",\n    \"password\": \"complicatedpassword\",\n    \"birthDate\": \"2023\",\n    \"lastName\": \"Appleseeed\",\n    \"firstName\": \"Sophia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE fail /api/patients/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 400\", function(){",
									"    pm.response.to.have.status(400);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/patients/sophia2043.appleseed@email.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"sophia2043.appleseed@email.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET fail /api/patients/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 400\", function(){",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/sophia2043.appleseed@email.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"sophia2043.appleseed@email.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET fail /api/session/whois",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/sessions/whois",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sessions",
								"whois"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/api/patients/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sophia2043.appleseed@email.com\",\n    \"password\": \"complicatedpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH/api/patients/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Wilma\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/sophia2043.appleseed@email.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"sophia2043.appleseed@email.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /api/patients/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/sophia2043.appleseed@email.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"sophia2043.appleseed@email.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/api/patients/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/patients/sophia2043.appleseed@email.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"sophia2043.appleseed@email.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/api/patients/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sophia2043.appleseed@email.com\",\n    \"password\": \"complicatedpassword\",\n    \"birthDate\": \"2023\",\n    \"lastName\": \"Appleseeed\",\n    \"firstName\": \"Sophia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /api/patients/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/patients/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"patients",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST fail /api/session/whois FAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/sessions/whois",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sessions",
								"whois"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "notification-service",
			"item": [
				{
					"name": "Unauthorised notification access",
					"item": [
						{
							"name": "GET api/v1/notifications/:email dentist (unauthorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 401 (unauthorised access)\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET api/v1/notifications/:email patient (unauthorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 401 (unauthorised access)\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sample dentist",
					"item": [
						{
							"name": "POST /api/dentists/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dentist1@example.com\",\n  \"password\": \"secretpassword\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"clinicCountry\": \"Country\",\n  \"clinicCity\": \"City\",\n  \"clinicStreet\": \"Street\",\n  \"clinicHouseNumber\": 123,\n  \"clinicZipCode\": 12345,\n  \"picture\": \"base64encodedimage\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sample appointments",
					"item": [
						{
							"name": "POST /api/dentists/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dentist1@example.com\",\n  \"password\": \"secretpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/appointments 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the request and response JSON bodies",
											"",
											"var requestJson = JSON.parse(pm.request.body.raw);",
											"var responseJson = pm.response.json();",
											"",
											"// Get the number of keys in the request and response",
											"var requestKeys = Object.keys(requestJson).length;",
											"var responseKeys = Object.keys(responseJson).length;",
											"",
											"// Compare the number of keys",
											"// Must be lower by 2, because there's the auto-generated key in the",
											"// response and patientId is set to NULL automatically.",
											"pm.test(\"Number of keys in request is lower by 1 than the response\", function () {",
											"    pm.expect(requestKeys).to.equal(responseKeys - 2);",
											"});",
											"",
											"// Check if the patientId property is set to null",
											"pm.test(\"Verify patientId is set to null\", function() {",
											"    pm.expect(responseJson.patientId).to.equal(null);",
											"});",
											"",
											"",
											"// Set the ID for other tests.",
											"const appointmentId = pm.response.json().id;",
											"pm.environment.set(\"appointmentId\", appointmentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start_timestamp\": 123131312,\n    \"end_timestamp\": 123131987,\n    \"dentistId\": \"dentist1@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/appointments",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/appointments 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the request and response JSON bodies",
											"",
											"var requestJson = JSON.parse(pm.request.body.raw);",
											"var responseJson = pm.response.json();",
											"",
											"// Get the number of keys in the request and response",
											"var requestKeys = Object.keys(requestJson).length;",
											"var responseKeys = Object.keys(responseJson).length;",
											"",
											"// Compare the number of keys",
											"// Must be lower by 2, because there's the auto-generated key in the",
											"// response and patientId is set to NULL automatically.",
											"pm.test(\"Number of keys in request is lower by 1 than the response\", function () {",
											"    pm.expect(requestKeys).to.equal(responseKeys - 2);",
											"});",
											"",
											"// Check if the patientId property is set to null",
											"pm.test(\"Verify patientId is set to null\", function() {",
											"    pm.expect(responseJson.patientId).to.equal(null);",
											"});",
											"",
											"",
											"// Set the ID for other tests.",
											"const appointmentId = pm.response.json().id;",
											"pm.environment.set(\"appointmentId2\", appointmentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start_timestamp\": 123131987,\n    \"end_timestamp\": 123132662,\n    \"dentistId\": \"dentist1@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/appointments",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sample patient",
					"item": [
						{
							"name": "POST/api/patients/register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "sessionKey=\"\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"patient1@example.com\",\n    \"password\": \"complicatedpassword\",\n    \"birthDate\": \"2003\",\n    \"lastName\": \"Sample\",\n    \"firstName\": \"Patient\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Book appointments",
					"item": [
						{
							"name": "POST/api/patients/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"patient1@example.com\",\n    \"password\": \"complicatedpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK a1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Get the response JSON",
											"var jsonResponse = pm.response.json();",
											"",
											"// Check if the response is an object",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"});",
											"",
											"// Check if the response has the required properties",
											"pm.test(\"Check start_timestamp property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('start_timestamp');",
											"    pm.expect(jsonResponse.start_timestamp).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check end_timestamp property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('end_timestamp');",
											"    pm.expect(jsonResponse.end_timestamp).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check dentistId property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('dentistId');",
											"    pm.expect(jsonResponse.dentistId).to.be.a('string');",
											"});",
											"",
											"pm.test(\"patientId is NOT null\", function() {",
											"    pm.expect(jsonResponse).to.have.property('patientId');",
											"    pm.expect(jsonResponse.patientId).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId=patient1@example.com&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "patient1@example.com"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK a2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Get the response JSON",
											"var jsonResponse = pm.response.json();",
											"",
											"// Check if the response is an object",
											"pm.test(\"Response is an object\", function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"});",
											"",
											"// Check if the response has the required properties",
											"pm.test(\"Check start_timestamp property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('start_timestamp');",
											"    pm.expect(jsonResponse.start_timestamp).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check end_timestamp property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('end_timestamp');",
											"    pm.expect(jsonResponse.end_timestamp).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Check dentistId property\", function() {",
											"    pm.expect(jsonResponse).to.have.property('dentistId');",
											"    pm.expect(jsonResponse.dentistId).to.be.a('string');",
											"});",
											"",
											"pm.test(\"patientId is NOT null\", function() {",
											"    pm.expect(jsonResponse).to.have.property('patientId');",
											"    pm.expect(jsonResponse.patientId).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId=patient1@example.com&toBook=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "patient1@example.com"
										},
										{
											"key": "toBook",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get patient notification (booked)",
					"item": [
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has two notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"patient1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/patients/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get dentist notification (booked)",
					"item": [
						{
							"name": "POST /api/dentists/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dentist1@example.com\",\n  \"password\": \"secretpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has two notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"dentist1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cancel appointment",
					"item": [
						{
							"name": "POST/api/patients/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"patient1@example.com\",\n    \"password\": \"complicatedpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOK (unbook) a1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response code shall be 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonResponse = pm.response.json();",
											"",
											"pm.test('Response is an object', function () {",
											"    pm.expect(jsonResponse).to.be.an('object');",
											"})",
											"",
											"pm.test('Check start_timestamp property', function () {",
											"    pm.expect(jsonResponse).to.have.property('start_timestamp');",
											"    pm.expect(jsonResponse.start_timestamp).to.be.a('number');",
											"})",
											"",
											"pm.test('Check end_timestamp property', function () {",
											"    pm.expect(jsonResponse).to.have.property('end_timestamp');",
											"    pm.expect(jsonResponse.end_timestamp).to.be.a('number');",
											"})",
											"",
											"pm.test('dentistId is a String', function () {",
											"    pm.expect(jsonResponse).to.have.property('dentistId');",
											"    pm.expect(jsonResponse.dentistId).to.be.a('string');",
											"})",
											"",
											"pm.test(\"patienId is set to Null\", function() {",
											"    pm.expect(jsonResponse).to.have.property('patientId');",
											"    pm.expect(jsonResponse.patientId).to.be.null;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?patientId=patient1@example.com&toBook=false",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "patientId",
											"value": "patient1@example.com"
										},
										{
											"key": "toBook",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get patient notification (unbooked)",
					"item": [
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has three notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"patient1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/patients/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get dentist notification (unbooked)",
					"item": [
						{
							"name": "POST /api/dentists/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dentist1@example.com\",\n  \"password\": \"secretpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has three notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"dentist1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a1",
					"item": [
						{
							"name": "DELETE a1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response contains the 'id' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"});",
											"",
											"pm.test(\"Response contains the 'start_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('start_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'end_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('end_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'dentistId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('dentistId');",
											"});",
											"",
											"pm.test(\"Response contains the 'patientId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('patientId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?dentistId=dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "dentistId",
											"value": "dentist1@example.com"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get dentist notification (deleted)",
					"item": [
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has four notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(4);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"dentist1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get patient notification (deleted)",
					"item": [
						{
							"name": "POST/api/patients/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"patient1@example.com\",\n    \"password\": \"complicatedpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has three notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"patient1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/patients/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a2",
					"item": [
						{
							"name": "POST /api/dentists/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dentist1@example.com\",\n  \"password\": \"secretpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE a2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code shall be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response contains the 'id' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"});",
											"",
											"pm.test(\"Response contains the 'start_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('start_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'end_timestamp' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('end_timestamp');",
											"});",
											"",
											"pm.test(\"Response contains the 'dentistId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('dentistId');",
											"});",
											"",
											"pm.test(\"Response contains the 'patientId' attribute\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('patientId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/appointments/:id?dentistId=dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"appointments",
										":id"
									],
									"query": [
										{
											"key": "dentistId",
											"value": "dentist1@example.com"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{appointmentId2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get dentist notification (deleted)",
					"item": [
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has five notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(5);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"dentist1@example.com\")\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.environment.set(\"dentistNotId\", jsonResponse[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get patient notification (deleted) Copy",
					"item": [
						{
							"name": "POST/api/patients/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"patient1@example.com\",\n    \"password\": \"complicatedpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has four notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(4);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"patient1@example.com\")\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.environment.set(\"patientNotId\", jsonResponse[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete notification (patient)",
					"item": [
						{
							"name": "DELETE one notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {",
											"    pm.response.to.have.status(204);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com/{{patientNotId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com",
										"{{patientNotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has three notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"patient1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE all patient not",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {",
											"    pm.response.to.have.status(204);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has zero notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE one notification (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {",
											"    pm.response.to.have.status(404);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/patient1@example.com/{{patientNotId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"patient1@example.com",
										"{{patientNotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/patients/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/patients/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"patients",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete notification (dentiist)",
					"item": [
						{
							"name": "POST /api/dentists/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set('sessionCookie', pm.cookies.get('sessionKey'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"dentist1@example.com\",\n  \"password\": \"secretpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE one notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {",
											"    pm.response.to.have.status(204);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com/{{dentistNotId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com",
										"{{dentistNotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has four notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(4);\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects should have the following attributes\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key).to.have.property(\"id\");\r",
											"        pm.expect(key).to.have.property(\"timestamp\");\r",
											"        pm.expect(key).to.have.property(\"message\");\r",
											"        pm.expect(key).to.have.property(\"email\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects attribute should have the right type\",\r",
											"function () {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.message).to.be.a(\"string\");\r",
											"        pm.expect(key.id).to.be.a(\"string\");\r",
											"        pm.expect(key.email).to.be.a(\"string\");\r",
											"        pm.expect(key.timestamp).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response array objects to have the same email as the user who requested\", function() {\r",
											"    for (let key of jsonResponse) {\r",
											"        pm.expect(key.email).to.be.eql(\"dentist1@example.com\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE all patient not",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {",
											"    pm.response.to.have.status(204);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/v1/notifications/:email  (authorised)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"// Check if the response is an object\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Response array has zero notification\", function () {\r",
											"    pm.expect(jsonResponse.length).to.be.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE one notification (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get status code 200 (authorised)\", () => {",
											"    pm.response.to.have.status(404);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/notifications/dentist1@example.com/{{dentistNotId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"notifications",
										"dentist1@example.com",
										"{{dentistNotId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/dentists/logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/dentists/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"dentists",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "admin-service",
			"item": [
				{
					"name": "POST NOT SAVED /requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Analytics object created\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"GET\",\n    \"path\": \"/appointments\",\n    \"agent\": \"Linux\",\n    \"clientHash\" : \"secureHash\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/requests",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Analytics object created\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"Id Set\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"requestId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"GET\",\n    \"path\": \"/appointments\",\n    \"agent\": \"Linux\",\n    \"clientHash\" : \"secureHash\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/requests",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST api/admins/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"admin@gmail.com\", \"password\": \"password\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /requests 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Analytics object created\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"GET\",\n    \"path\": \"/appointments\",\n    \"agent\": \"Linux\",\n    \"clientHash\" : \"secureHash\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/requests",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /requests 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Analytics object created\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"Timestamp set\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"start_ts\",jsonData.timestamp+1);",
									"    pm.environment.set(\"end_ts\",jsonData.timestamp-3600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"GET\",\n    \"path\": \"/appointments\",\n    \"agent\": \"Linux\",\n    \"clientHash\" : \"secureHash\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/requests",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Interval /requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Analytics object created\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"Intervals working\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(5)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/requests?timeframe=300&method=GET&search=requests&loggedInOnly=false",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"requests"
							],
							"query": [
								{
									"key": "timeframe",
									"value": "300"
								},
								{
									"key": "method",
									"value": "GET"
								},
								{
									"key": "search",
									"value": "requests"
								},
								{
									"key": "loggedInOnly",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET api/v1/sessions/whois",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Retrieve correct whois data\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.email).to.eql(\"admin@gmail.com\");",
									"        pm.expect(jsonData.type).to.eql(\"a\");",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/sessions/whois",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sessions",
								"whois"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST api/admins/login (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"admin123@gmail.com\", \"password\": \"password\"} // invalid admin email",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST api/admins/login (invalid) 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"admin123@gmail.com\"} //missing password field",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST api/v1/admins/login (invalid) 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code shall be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\": \"admin@gmail.com\", \"password\": \"incorrectPassword\"} // invalid admin password",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE api/admins/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/admins/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admins",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}